2/24
・sprintf_s,remane関数の使い方をコーディングし、確かめて理解できた
・コマンドライン引数の使い方を覚えた

2/25
・西暦を和暦に変換するプログラムを作成。
・0か1を判定する関数内で引数を渡して計算させる場合、参照渡しにすることで
　Main関数内で計算させた結果を表示させることができた

2/26
・構造体の配列を定義してプログラムを実行し
　構造体の配列を理解できた

2/27
・Visual stdioでブレークを張らないと変数の値を見れない
・std::cinで構造体の値を入力しデバックで値を確認できた
・()と．は*よりも優先順位が高いので*(pcal+i).nameはエラーになる
　(*(pcal+i)).nameが正しい

2/29　2/29　3/1
・クラスの定義はmain関数の外で定義する
・クラスポインタに「new　クラス」を代入し
　オブジェクトを動的に作成できた
・staticはそのファイルの中のみ有効
　externできない
・コンストラクタの呼び出しで
　Car car1とCar car1 = Car()は同じ処理
　Car car1(a, b)とCar car1 = Car(a, b)は同じ処理
・コンストラクタにデフォルト引数を設定すると
　オーバーロードしなくていい
　2つもコンストラクタ関数はいらない
・#ifndefで重複インクルード避けるマクロ作成
　
3/7　3/8
・基本クラスのポインタを使って、派生クラスのオブジェクトを指すと
　基本クラスの関数が呼ばれる
・純粋仮想関数があるクラスはオブジェクトを作成できない
・基本クラスに純粋仮想関数があると派生クラスでその関数をオーバーロード
　しないとオブジェクトを作成できない
・typeid関数を使ってクラスを調べた　typeid(オブジェクト).name()
・オブジェクトの演算は演算子関数を使用する
　演算子関数をオーバーロードする
　
3/9
・friend関数でオブジェクトと他の値を計算できる
・friend関数はメンバ関数ではない
・friend関数はクラスのprivateにアクセスできる
・friend関数として演算子関数をオーバーロードできる
・演算子関数の引数としてポインタは使えない

3/14
・friend関数とはクラスのオブジェクトと数値の計算と行う
・クラスの型変換は理解できませんでした
・new演算子関数で動的にメモリを確保したらdeleteしないといけない
・オブジェクトが破棄されるときにデストラクタが呼ばれる
・strcpy関数のエラーを解決できた
　strcpy_s関数に変更しコピー元のサイズ(配列の要素数)を第2引数に入れた
・デストラクタをオーバーロードすることはできない

3/21
・コンパイラの警告はバグを解決することがある
・オブジェクトとして格納されるデータ型をオブジェクト型
・コンパイル、リンク後は変数名はアドレスに変わる
・*(p + 1)とp[i]は同じ意味
・シンタックスシュガー：人にわかりやすいコード

3/29
・ソフトウェア技術者はハードの知識も知っておく必要がある
・ユビキタスコンピューティングは、コンピュータがいたる所に存在し
　いつでもどこでも使える状態
・肥大化したソフトウェアは階層構造を適応すると開発が楽になる
・オブジェクト指向は短い開発期間で開発できる
・オフショア開発とは賃金が日本よりやすい国で開発すること

4/8
・分割、抽象化、階層化がプログラム開発の複雑化を解消する
・サブルーチンが大域変数を読み書きできると可読性が悪くなり
　保守しにくくなる

4/17
・よいプログラムとは他人にわかりやすく追加変更、再利用が行いやすい
・「分割統治法」大きな問題を小さく分割することで問題解決しやすくなる

・優れたソフトウェアアーキテクチャとはモジュール強度は高く
　モジュール間強度は弱い
・継承はカプセル化を壊す
・アスペクト指向プログラミングは、オブジェクト指向ではうまく分離できない特徴を「アスペクト」とみなし、アスペクト記述言語をもちいて分離して記述することでプログラムに柔軟性をもたせようとする試み

------------------------------------------------------------------------
・管理指標
　Q品質、Cコスト、D納期
・キックオフミーティング
　開発関係者で開発の目的や設計方針についての説明会
　疑問を残さないように十分な質疑応答を行う
・進捗管理
　開発現状の確認と計画に差異が出たときに対処する
・CMMI
　開発業務および管理業務作業内容、成果物に着目した
　プロセス改善のモデル
・クラス図はソフトウェアが制御する体操や機能をわかりやすく示すモデル
・ソフトウェアを再利用するということはそのソフトをリリースするまで
　すべての作業を再利用するソースコードを再利用する訳ではない
・ソフトウェアの設計のノウハウはドキュメントにする
　ノウハウを活用することで開発チームの生産性が上がる









